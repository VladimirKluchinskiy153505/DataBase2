--1)
CREATE SEQUENCE STUDENTS_SEQUENCE
START WITH 1
INCREMENT BY 1
NOMAXVALUE;
-----------------------
CREATE SEQUENCE GROUPS_SEQUENCE
START WITH 1
INCREMENT BY 1
NOMAXVALUE;
-----------------------
CREATE OR REPLACE TRIGGER GENERATE_STUDENTS_UNIQUE_ID
BEFORE INSERT ON STUDENTS
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        SELECT STUDENTS_SEQUENCE.NEXTVAL INTO :NEW.ID FROM DUAL;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'GENERATE_STUDENTS_UNIQUE_ID ERROR!: ' || SQLERRM);
END;
---------------------------------------------
CREATE OR REPLACE TRIGGER GENERATE_GROUPS_UNIQUE_ID
BEFORE INSERT ON GROUPS
FOR EACH ROW
BEGIN
    IF :NEW.ID IS NULL THEN
        SELECT GROUPS_SEQUENCE.NEXTVAL INTO :NEW.ID FROM DUAL;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'GENERATE_GROUPS_UNIQUE_ID ERROR!: ' || SQLERRM);
END;
-- Create the trigger


--2)

CREATE OR REPLACE TRIGGER VERIFY_STUDENTS_UNIQUE_ID
BEFORE INSERT OR UPDATE ON STUDENTS
FOR EACH ROW
DECLARE
    id_count NUMBER;
BEGIN
    IF :OLD.ID != :NEW.ID THEN
        id_count:=0;
        SELECT COUNT(*) INTO id_count FROM STUDENTS WHERE ID = :NEW.ID;
        IF id_count > 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'ID MUST BE UNIQUE!');
        END IF;
        
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'VERIFY_UNIQUE_ID ERROR!: ' || SQLERRM);
END;

-----------------------------------------------------------

CREATE OR REPLACE TRIGGER VERIFY_GROUPS_UNIQUE_ID
BEFORE INSERT OR UPDATE ON GROUPS
FOR EACH ROW
DECLARE
    id_count NUMBER;
BEGIN
    IF :OLD.ID != :NEW.ID THEN
        SELECT COUNT(*) INTO id_count FROM GROUPS WHERE ID = :NEW.ID;
        IF id_count > 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'ID MUST BE UNIQUE!');
        END IF;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'VERIFY_UNIQUE_ID ERROR!: ' || SQLERRM);
END;

--3
CREATE OR REPLACE TRIGGER VERIFY_UNIQUE_GROUP_NAME
BEFORE INSERT OR UPDATE ON GROUPS
FOR EACH ROW
DECLARE
    name_count NUMBER;
BEGIN
    IF :OLD.ID != :NEW.ID THEN
        SELECT COUNT(*) INTO name_count FROM GROUPS WHERE NAME = :NEW.NAME;
        IF name_count > 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'GROUP_NAME MUST BE UNIQUE!');
        END IF;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20002, 'VERIFY_UNIQUE_GROUP_NAME ERROR!: ' || SQLERRM);
END;
----
DROP TRIGGER GENERATE_STUDENTS_UNIQUE_ID;
DROP TRIGGER GENERATE_GROUPS_UNIQUE_ID;
DROP TRIGGER VERIFY_STUDENTS_UNIQUE_ID;
DROP TRIGGER VERIFY_GROUPS_UNIQUE_ID;

DROP SEQUENCE STUDENTS_SEQUENCE;
DROP SEQUENCE GROUPS_SEQUENCE;
DROP TRIGGER VERIFY_UNIQUE_GROUP_NAME;

SELECT * FROM STUDENTS;
        