CREATE TABLE STUDENTS_AUDIT(
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY,
    STUDENT_ID NUMBER,
    ACTION VARCHAR(6),
    OLD_DATA VARCHAR(2000),
    NEW_DATA VARCHAR(2000),
    ACTION_DATE TIMESTAMP
);

CREATE OR REPLACE TRIGGER STUDENTS_AUDIT_TRIGGER
AFTER INSERT OR UPDATE OR DELETE ON STUDENTS
FOR EACH ROW
DECLARE
    S_ACTION STUDENTS_AUDIT.ACTION%TYPE;
    S_OLD_DATA STUDENTS_AUDIT.OLD_DATA%TYPE;
    S_NEW_DATA STUDENTS_AUDIT.NEW_DATA%TYPE;
    S_ACTION_DATE TIMESTAMP;
BEGIN
    S_ACTION_DATE := SYSTIMESTAMP; -- »спользуем SYSTIMESTAMP дл€ точной записи времени с секундами
    
    IF INSERTING THEN
        S_ACTION := 'INSERT';
        S_OLD_DATA := '';
        S_NEW_DATA := :NEW.ID || ',' || :NEW.NAME || ',' || :NEW.GROUP_ID;
    ELSIF UPDATING THEN
        S_ACTION := 'UPDATE';
        S_OLD_DATA := :OLD.ID || ',' || :OLD.NAME || ',' || :OLD.GROUP_ID;
        S_NEW_DATA := :NEW.ID || ',' || :NEW.NAME || ',' || :NEW.GROUP_ID;
    ELSIF DELETING THEN
        S_ACTION := 'DELETE';
        S_OLD_DATA := :OLD.ID || ',' || :OLD.NAME || ',' || :OLD.GROUP_ID;
        S_NEW_DATA := '';
    END IF;
    
    INSERT INTO STUDENTS_AUDIT(STUDENT_ID, ACTION, OLD_DATA, NEW_DATA, ACTION_DATE)
    VALUES (:NEW.ID, S_ACTION, S_OLD_DATA, S_NEW_DATA, S_ACTION_DATE);
EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR(-20001, 'STUDENTS_AUDIT ERROR!: ' || SQLERRM);
END;
/
DROP TABLE STUDENTS_AUDIT
DROP TRIGGER STUDENTS_AUDIT_TRIGGER;